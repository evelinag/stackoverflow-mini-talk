{"version":3,"sources":["../tsne-bubble.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAqBE,8CAEsC,QAAQ,UAF9C,iBAGuC,SAAS,UAHhD,sCArBF;;AA4BQ;AAAS,kBAAC,QAAD;AACb,WAAC,cAAD;AADU;;AAIN;AAAS,kBAAC,QAAD;AACb,WAAC,eAAD;AADU;;AAhCd;AAAA;AAAA;;AAyCG;AAAA;;AAGM;AAAa,kCAAkB;AAAA;AAAA,OAAlB;;AAAb,cACE;AAAA;AAAA,YADF,EACiB;AAAA;AAAA,YADjB;AAAE,KAAF;;AAEO;;AAGP;AAAa,kCAAkB;AAAA;AAAA,OAAlB;;AAAb,cACE;AAAA;AAAA,YADF,EACiB;AAAA;AAAA,YADjB;AAAE,KAAF;;AAEO;AAGZ,kBAAE,kCAAD,4CAAD,YAvC8C;AAAA,aA6CQ;AAAA;AAAA;AAAA,mBAAoB;AAAA;AAAA,aAApB;AAAA;AAAA;AAAA,OA7CR;AAAA,KAuC9C,aAvC8C;AAAA,aA8CQ;AAAA;AAAA;AAAA,mBAAoB;AAAA;AAAA,aAApB;AAAA;AAAA;AAAA,OA9CR;AAAA,KAuC9C;AAAA;AAAA,aASQ;AAAA;AAAA;AAAA;AAAA,OATR;AAAA;AAAA;AAAA,aAcQ;AAAA;AAAA;AAAA;AAAA,OAdR;AAAA,kBAvC8C;AAAA,aAwDZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAxDY;AAAA,KAuC9C;AAkBD,iCAzD+C;AAAA,aA2DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA3DF;AAAA,KAyD/C;AAKA;AACE;;AAEL,0BAlE4C;AAAA,KAmExC;AAAA;AAAA,mBAAwC;AAAA;AAAK,SAA7C,MACK;AAAA;AAA6B;AAAA,OADlC;AAAA,KAnEwC;AAAC,GAkE7C;AAhFA,8BAqFY,8BArFZ;;AAwFI;AAAA;AAMA,cAAmB,0CAAnB;AAGS;;kCAEoB;AAAK;AAAL;AAAC,G","file":"tsne-bubble.js","sourceRoot":"/Users/evelina/OtherProjects/Fable-SO/out","sourcesContent":["\n#r \"node_modules/fable-core/Fable.Core.dll\"\n#load \"node_modules/fable-import-d3/Fable.Import.D3.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\nopen Fable.Import.Browser\n\nlet width, height = 1000., 700.\nlet size = width, height\nlet margin = 100.\n\nlet inline f2 (f: 'a->'b->'c) = Func<_,_,_> f\nlet inline f3 (f: 'a->'b->'c->'d) = Func<_,_,_,_> f\n\n[<Emit(\"(function(a,b,c) { var t=this; return $0(t)([a,b,c]); })\")>]\nlet withThis(f:'T -> ('T1 * 'T2 * 'T3) -> 'R) : Func<'T1', 'T2, 'T3', 'R> = failwith \"!\" \n\nlet svg = \n  D3.Globals.select(\"body\")\n    .append(\"svg\")\n    .attr(\"width\", unbox<D3.Primitive> (width + 2.0*margin) )\n    .attr(\"height\", unbox<D3.Primitive> (height + 2.0*margin) )\n    .attr(\"class\", unbox<D3.Primitive> \"graph-svg-component\")\n\nlet scaleX xmin xrange x =\n    let xscale = (x - xmin)/xrange\n    (xscale * width) + x + margin\n\nlet scaleY ymin yrange y =\n    let yscale = (y - ymin)/yrange\n    (yscale * height) + y + margin\n\nlet rNormal = unbox<D3.Primitive> 3\nlet rFocus = unbox<D3.Primitive> 10\nlet rSearch = unbox<D3.Primitive> 15\n\nlet draw data =\n\n   console.log(\"begin drawing data\")\n\n   let xmin, xmax = \n     let ds = data |> Seq.map (fun d -> d?x |> unbox<float>)\n     ds |> Seq.min, ds |> Seq.max\n   let xrange = xmax - xmin\n\n   let ymin, ymax = \n     let ds = data |> Seq.map (fun d -> d?y |> unbox<float>)\n     ds |> Seq.min, ds |> Seq.max\n   let yrange = ymax - ymin\n\n   let circles =\n    ((svg.selectAll(\"circle\")\n        .data(data |> unbox<obj[]>)\n        |> unbox<D3.Selection.Update<obj>>)\n        .enter()\n        .append(\"circle\")\n        .attr(\"r\", rNormal))\n        .attr(\"cx\", f3 (fun d _ _ -> unbox<D3.Primitive> (unbox<float> d?x |> scaleX xmin xrange) ) )\n        .attr(\"cy\", f3 (fun d _ _ -> unbox<D3.Primitive> (unbox<float> d?y |> scaleY ymin yrange)) )\n        .on(\"mouseover\", withThis(fun t _ -> \n            D3.Globals.select(t:string)\n              .classed(\"focus\", true)\n              .attr(\"r\", rFocus)\n              |> unbox ))\n        .on(\"mouseout\", withThis(fun t _ -> \n            D3.Globals.select(t:string)\n              .classed(\"focus\", false)\n              .attr(\"r\", rNormal) |> unbox ))  \n        .attr(\"id\", f3 (fun d _ _ -> (\"name\" + unbox<string> d?tag) |> unbox<D3.Primitive> ))\n   circles    \n        .append(\"title\")\n        .text(f3 (fun d _ _ ->  unbox<D3.Primitive> d?tag ))\n        |> ignore\n\n   console.log(\"finished drawing data\")\n   ()\n\nD3.Globals.json(\"data/ts.json\", f2 (fun error data -> \n    if (unbox error) then error |> unbox |> raise\n    else draw (data |> unbox<obj seq>)))\n\n// Search for specific tag\nlet input = document.getElementById(\"tag\") :?> HTMLTextAreaElement\n\nlet run() =\n    D3.Globals.selectAll( \"circle\" ).classed(\"focus\", false)\n      .classed(\"search\", false)\n      .attr(\"r\", rNormal)\n    |> ignore\n\n\n    D3.Globals.select( \"circle[id='name\\\"\" + input.value + \"\\\"']\" )\n      .classed(\"search\", true)\n      .attr(\"r\", rSearch)\n    |> ignore\n\ninput.addEventListener_keyup(fun _ -> run(); box())"]}